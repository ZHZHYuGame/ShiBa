1.数据结构
数组:
固定大小:数组在创建时指定大小，之后不能动态调整
连续内存:数组的元素在内存中是连续的,这使得数组访问数组快
类型一致:数组中的所有元素必须是相同的数据类型
索引访问:数组是元素是通过索引访问，从0开始
缺点
插入和删除效率低应为他是连续存储的，需要移动大量元素
列表:
动态大小:list<T>的大小可以动态调整，无需手动管理容量
泛型支持:list<T>可以存储任意类型元素
高效访问:通过索引访问元素
自动扩容:当元素超过当前容量时,会自动扩容
丰富的方法:提供了添加、删除、查找、排序
缺点
插入和删除效率低：插入和删除要移动大量元素
内存占用:自动扩容可能会导致额外的内存占用
链表:
动态大小:可以动态调整，无需预先分配内存
高效插入和删除:在链表中插入或删除节点的时间复杂度O（1）
非连续内存:链表的节点在内存中是非连续存储的，每个节点通过指针链接。
访问效率低:访问链表的元素需要从头节点遍历，时间复杂度为O（n）
链表的类型
单向链表:每个节点只包含一个指向下一个节点的指针。只能从头节点开始遍历
双向链表:每个节点包含两个指针，分别指向前一个节点和后一个节点。可以从头节点或尾节点开始遍历。
循环链表:尾节点的指针指向节点，形成一个环。可以是单向循环链表或双向循环链表
缺点:
访问效率低：要从头开始循环遍历
内存开销：没个节点需要额外的空间储存指针.
栈
后进先出:最后入栈的元素先出栈
操作受限:只能在栈顶进行插入和删除
高效操作:压栈和弹栈时间复杂度O(1)
动态大小:栈可以动态调整
缺点：
访问受限:只能访问栈顶元素，无法直接访问其他元素
动态扩容开销:基于数组实现的栈在扩容时可能回额外的性能开销
队列
先进先出：先入队的先出
操作受限:只能在队尾入队，在队头出队
高效操作:入队和出队时间复杂度O(1)
动态大小:队列的大小可以动态调整
缺点:
访问受限:只能访问栈顶元素，无法直接访问其他元素
动态扩容开销:基于数组实现的栈在扩容时可能回额外的性能开销
字典
键值对存储:每个元素包含一个键和一个值
键唯一：字典中的键必须是唯一的不能重复
高效的查找：可以通过键查找值
动态大小:字典的大小可以动态扩容
缺点:
内存开销：哈希表需要额外的空间来存储哈希值和解决冲突
无序性：字典中的元素是无序的
哈希集合
元素唯一:哈希集合中的元素必须是唯一的不能重复
高效操作:添加删除和查找时间复杂度O(1)
无序性:哈希集合中的元素是无序的
动态大小:哈希集合的大小可以动态调整
缺点:
存开销：哈希表需要额外的空间来存储哈希值和解决冲突
无序性：哈希集合中的元素是无序 的